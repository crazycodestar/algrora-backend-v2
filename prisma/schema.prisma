// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  activated     Boolean        @default(false)
  imageUri      ImageUri?
  notifications Notification[]
  address       String
  store         Store?
  roles         UsersOnRoles[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Notification {
  id                Int      @id @default(autoincrement())
  topic             String
  message           String
  notificationId    Int
  notificationOwner User     @relation(fields: [notificationId], references: [id])
  createdAt         DateTime @default(now())
}

model Store {
  id          Int       @id @default(autoincrement())
  isActive    Boolean?  @default(true)
  activated   Boolean?  @default(false)
  products    Product[]
  orders      Order[]
  logs        Log[]
  ownerId     Int       @unique
  owner       User      @relation(fields: [ownerId], references: [id])
  preOrderExp DateTime
  orderExp    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  isOrder         Boolean
  hasPreOrder     Boolean          @default(false)
  basePrice       Int
  imageUri        String           @db.VarChar(255)
  productContents ProductContent[]
  storeId         Int
  store           Store            @relation(fields: [storeId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Order {
  id              Int                   @id @default(autoincrement())
  name            String                @db.VarChar(255)
  isOrder         Boolean
  isPreOrder      Boolean
  createdAt       DateTime              @default(now())
  storeId         Int
  store           Store                 @relation(fields: [storeId], references: [id])
  productContents ProductContentFixed[]
}

model Log {
  id              Int                   @id @default(autoincrement())
  name            String                @db.VarChar(255)
  isOrder         Boolean
  isPreOrder      Boolean
  createdAt       DateTime              @default(now())
  storeId         Int
  store           Store                 @relation(fields: [storeId], references: [id])
  productContents ProductContentFixed[]
}

model ProductContentFixed {
  id       Int            @id @default(autoincrement())
  imageUri ImageUri[]
  quantity Int
  name     String         @db.VarChar(255)
  price    Int
  orderId  Int
  order    Order          @relation(fields: [orderId], references: [id])
  logId    Int
  log      Log            @relation(fields: [logId], references: [id])
  options  KeyValuePair[]
}

model ProductContent {
  id        Int        @id @default(autoincrement())
  productId Int
  product   Product    @relation(fields: [productId], references: [id])
  name      String     @db.VarChar(255)
  imageUri  ImageUri[]
  price     Int
  options   Option[]
}

model Option {
  id               Int            @id @default(autoincrement())
  name             String
  options          KeyValuePair[]
  productContentId Int
  productContent   ProductContent @relation(fields: [productContentId], references: [id])
}

// field options
model KeyValuePair {
  id                    Int                  @id @default(autoincrement())
  key                   String               @db.VarChar(255)
  amount                Int?                 @default(0)
  description           String?
  isPreOrder            Boolean?             @default(false)
  optionId              Int
  option                Option               @relation(fields: [optionId], references: [id])
  productContentFixedId Int?
  productContentFixed   ProductContentFixed? @relation(fields: [productContentFixedId], references: [id])
}

model ImageUri {
  id                    Int                 @id @default(autoincrement())
  url                   String              @db.VarChar(255)
  productContentId      Int
  productContent        ProductContent      @relation(fields: [productContentId], references: [id])
  userId                Int                 @unique
  user                  User                @relation(fields: [userId], references: [id])
  productContentFixedId Int
  productContentFixed   ProductContentFixed @relation(fields: [productContentFixedId], references: [id])
}

model Role {
  id    Int            @id @default(autoincrement())
  role  RoleEnum
  users UsersOnRoles[]
}

model UsersOnRoles {
  userId Int
  user   User @relation(fields: [userId], references: [id])
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

enum RoleEnum {
  USER
  ADMIN
  SELLER
}
